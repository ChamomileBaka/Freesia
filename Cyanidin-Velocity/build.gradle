dependencies {
    compileOnly 'io.netty:netty-all:4.1.108.Final'
    compileOnly 'com.github.retrooper:packetevents-velocity:2.4.0'
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    compileOnly "net.kyori:adventure-api:4.17.0"
    implementation "com.electronwill.night-config:toml:3.6.6"
    implementation "org.geysermc.mcprotocollib:protocol:1.21-SNAPSHOT"
    implementation project(":Cyanidin-Common")
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': rootProject.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)

shadowJar {
    mergeServiceFiles()
}